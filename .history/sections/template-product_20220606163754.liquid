{%- comment -%}!important: cssを上書きする。{%- endcomment -%}
<style>
    .swiper-button-prev,
    .swiper-button-next {
        color: black;
        top: auto !important;
        height: 20px;
    }

    .swiper-button-prev::after,
    .swiper-button-next::after {
        font-size: 20px;
    }

    .swiper-pagination {
        color: black;
        bottom: 0 !important;
    }

    .swiper-pagination-bullet-active {
        background-color: black !important;
    }

    .product--information {
        height: fit-content;
    }

    .spr-container {
        padding: 15px;
        margin: 0 15%;
        border: none;
    }

    .spr-summary {
        color: gray;
        display: flex;
        flex-flow: column;
    }

    .spr-summary-actions a {
        color: blue;
        font-weight: bold;
        background-color: transparent;
    }

    .spr-summary-actions a:hover {
        background-color: transparent;

    }

    .spr-icon-star-empty:before {
        content: '\e801';
        color: #ffd500;
    }

    .spr-button {
        background-color: blue;
        color: white;
        padding: 4px 12px;
        border: 2px white solid;
        border-radius: 0.375rem;
        font-weight: bold;
    }

    .spr-button:hover {
        color: gray;
    }

    .spr-content input {
        outline: 2px solid transparent;
        outline-offset: 2px;
    }

    .spr-form-message-error {
        background: whitesmoke;
        color: red;
        border: 2px solid red;
        padding: 0.3rem;
        margin: 2rem 0;
        border-radius: 0.375rem;
        box-shadow: 2px 2px 2px lightgrey;
        font-weight: bold;
    }
    #product-description {
        font-family:"Zen Maru Gothic" !important;
    }
</style>

{%- comment -%}選択された商品データ{%- endcomment -%}
{% assign selected_variant = product.selected_or_first_available_variant %}
<!-- PRODUCT CONTENT -->
<div class="h-16 md:h-36"></div>
<div class="max-w-6xl mx-auto my-8">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <!-- PRODUCT IMAGES -->
    <div class="product--medias">
        <div class="hidden md:block">
            {% if product.media.first != null %}
                {% for media in product.media %}
                    <div class="h-100 overflow-hidden p-2">
                        {% render "product-media", media: media %}
                    </div>
                {% endfor %}
            {% else %}
                {% assign placeholder_img = "product-1" %}
                <div class="h-100 overflow-hidden">
                    {{ placeholder_img | placeholder_svg_tag: "rounded-md w-full h-full object-cover bg-gray-400" }}
                </div>
            {% endif %}
        </div>
        <div class="md:hidden">
            <div class="swiper h-96">
                <div class="swiper-wrapper">
                    {% if product.media.first != null %}
                        {% for media in product.media %}
                            <div class="swiper-slide">
                                <div class="h-80 overflow-hidden p-2">
                                    {% render "product-media", media: media %}
                                </div>
                            </div>
                        {% endfor %}
                    {% else %}
                        {% assign placeholder_img = "product-1" %}
                        <div class="w-80 mx-auto h-80 overflow-hidden">
                            {{ placeholder_img | placeholder_svg_tag: "rounded-md w-full h-full object-cover bg-gray-400" }}
                        </div>
                    {% endif %}
                </div>
                <div class="swiper-pagination"></div>
                <div class="swiper-button-prev"></div>
                <div class="swiper-button-next"></div>
            </div>
        </div>
    </div>
    <!-- PRODUCT INFOMATION -->
    <div class="product--information p-3 sticky top-5">
        {%- comment -%}id, novalidateを付与{%- endcomment -%}
        <!-- PRODUCT FORM -->
        {% form 'product', product, id: "product-form", novalidate: "novalidate" %}
        {%- comment -%}これがなければ商品が正常にカートに追加できない{%- endcomment -%}
        <input type="hidden" name="id" value="{{ selected_variant.id }}">
        {% for block in section.blocks %}
        {% case block.type %}
        {% when "vendor" %}
        <!-- PRODUCT VENDOR -->
        <div class="flex justify-start items-center">
            {% if selected_variant.price < selected_variant.compare_at_price %}
                <div class="">
                    {% render "icon-product-sale", size:12 %}
                </div>
            {% endif %}
            <div class="my-2 {% if selected_variant.price < selected_variant.compare_at_price %}ml-4 md:ml-8{% endif %} ">
                <span class="text-xs md:text-sm text-gray-500">{{ product.vendor }}</span>
            </div>
        </div>
        {% when "title" %}
        <!-- PRODUCT TITLE -->
        <div class="my-2">
            <h1 class="text-2xl md:text-3xl font-bold">{{ product.title }}</h1>
        </div>
        {% when "price" %}
        <!-- PRODUCT PRICE -->
        <div class="flex items-baseline my-2" id="price-{{ section.id }}">
            <p class="text-xs md:text-sm text-red-500 line-through">
                {{ selected_variant.compare_at_price | money }}
            </p>
            <span class="text-lg text-gray-900 ml-1">{{ selected_variant.price | money }}</span>
        </div>
        {% when "variant_selector" %}
        <div class="my-2">
            <!-- PRODUCT OPTIONS-->
            {% unless product.has_only_default_variant %}
            {%- comment -%}div -> variant-selector に変更。customElementsで作成{%- endcomment -%}
            <variant-selector data-url="{{ product.url }}" data-section="{{ section.id }}">
                {% for option in product.options_with_values %}
                {%- comment -%}for=""：属性は一意の値を入れる{%- endcomment -%}
                <label class="text-xs md:text-sm xl:text-base" for="Option-{{ section.id }}">{{ option.name }}</label>
                <div class="my-2">
                    <select name="options[{{ option.name | escape }}]" id="Option-{{ section.id }}"
                        class="w-full border-2 py-1 px-3 rounded-md focus:outline-none">
                        {% for value in option.values %}
                        <option class="text-xs md:text-sm xl:text-base" value="{{ value | escape }}" 
                            {% if option.selected_value == value %}
                            selected="selected" 
                            {% endif %}
                        >
                            {{ value }}
                        </option>
                        {% endfor %}
                    </select>
                </div>
                {%- comment -%}product.variantsのJSONを埋め込む{%- endcomment -%}
                <script type="application/json">
                                        {{ product.variants | json }}
                                    </script>
                {% endfor %}
            </variant-selector>
            {% endunless %}
        </div>
        {% when "quantity" %}
        <!-- PRODUCT QUANTITY -->
        <div class="my-3">
            <label class="text-xs md:text-sm xl:text-base" for="Quantity-{{ section.id }}">数量</label>
            <div class="mt-2 text-xs md:text-sm xl:text-base">
                <input type="number" name="quantity" id="Quantity-{{ section.id }}" value="1" min="1"
                    class="w-full border-2 px-4 py-1 rounded-md focus:outline-none">
            </div>
        </div>
        <!-- SHIPPING DETAIL -->
        {% when "shipping_detail" %}
            <div class="my-3">
                <div class="max-w-6xl mx-auto px-4">
                    <div class="flex flex-col items-center my-8 md:my16 font-zen_maru_gothic">
                        <h3 class="text-lg md:text-xl font-bold w-full">配送情報</h3>
                        <div class="w-full my-3">
                            <p class="w-full text-sm md:text-base">日本のみ配達可能<br>無料返品</p>
                            <p class="w-full text-sm md:text-base text-blue-500 underline"><a href="/policies/refund-policy">返品について</a></p>
                        </div>
                        <div class="w-full my-4 space-y-2">
                            <p class="w-full text-sm text-gray-500 md:text-base">通常配達：10000円以下　一律550円</p>
                            <p class="w-full text-sm text-gray-500 md:text-base">　　　　　10000円以上　送料無料</p>
                            <p class="w-full text-sm text-gray-500 md:text-base">離島配達　10000円以下　一律1020円</p>
                            <p class="w-full text-sm text-gray-500 md:text-base">　　　　　15000円以上　送料無料</p>
                        </div>
                    </div>
                </div>
            </div>
        {% when "description" %}
        <!-- PRODUCT DESCRIPTION -->
        <div id="product-description" class="my-4 md:my-8 p-3 md:p-6">
            <p class="text-gray-500">{{ product.description }}</p>
        </div>
        {% when "checkout_buttons" %}
        <!-- PRODUCT CHECKOUT BUTTON -->
        <div class="my-3 ">
            <button 
                type="submit" name="add"
                class="w-full text-base xl:text-lg uppercase " 
                {% if selected_variant.available == false %} disabled {% endif %}
            >
                <div class=" flex justify-center border-2 border-yellow-300 ring-black ring-2 bg-black text-white  ml-4 py-3 px-3 shadow-md cursor-pointer border-3 hover:bg-white hover:text-black hover:border-black hover:ring-yellow-300 transform ease-in-out duration-300">
                    {% if selected_variant.available == false %}
                        売り切れ
                    {% else %}
                        カートに追加
                    {% endif %}
                </div>
            </button>
        </div>
        {% else %}
        {% endcase %}
        {% endfor %}
        {% endform %}
    </div>
</div>
</div>

<script>
    class VariantSelector extends HTMLElement {
        constructor() {
            super();
            this.addEventListener("change", this.onVariantChange)
        }
        // this.　がなければエラーになった。
        onVariantChange() {
            this.getSelectedOptions();
            this.getSelectedVariant();

            if (this.currentVariant) {
                this.updateURL();
                this.updateFormID();
                this.updatePrice();
            }
        }
        getSelectedOptions() {
            this.options = Array.from(this.querySelectorAll('select'), (select) => select.value)
        }

        getVariantJSON() {
            //this.variantDataがなければ埋め込んだJSONデータを読み込んで使用
            this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent)
            return this.variantData;
        }

        getSelectedVariant() {
            this.currentVariant = this.getVariantJSON().find(
                (variant) => {
                    const findings = !variant.options.map(
                        (option, index) => {
                            return this.options[index] === option;
                        },
                    ).includes(false);
                    if (findings) return variant;
                }
            );
            console.log("currentVariant: ", this.currentVariant);
        }
        updateURL() {
            if (!this.currentVariant) return;
            // dataset.url => variant-selector data-url=""の事
            window.history.replaceState({}, "", `${this.dataset.url}?variant=${this.currentVariant.id}`);
        }

        updateFormID() {
            const form_input = document.querySelector('#product-form').querySelector('input[name="id"]');
            form_input.value = this.currentVariant.id;
        }

        updatePrice() {
            fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&session_id=${this.dataset.section}`)
                .then((response) => response.text())
                .then((responseText) => {
                    const id = `price-${this.dataset.section}`
                    const html = new DOMParser().parseFromString(responseText, 'text/html');
                    console.log('html :', html);
                    const oldPrice = document.getElementById(id);
                    const newPrice = html.getElementById(id);
                    console.log('oldHtml: ', oldPrice.innerHTML);
                    console.log('newHtml: ', newPrice.innerHTML);
                    if (oldPrice && newPrice) oldPrice.innerHTML = newPrice.innerHTML;
                });
        }
    }
    customElements.define("variant-selector", VariantSelector);
</script>

<script>

    document.addEventListener('DOMContentLoaded', () => {
        const swiper = new Swiper('.swiper', {
            direction: "horizontal",
            pagination: {
                el: '.swiper-pagination',
                clickable: true
            },
            navigation: {
                prevEl: '.swiper-button-prev',
                nextEl: ".swiper-button-next"
            },
        });
    });
</script>

{% schema %}
{
    "name": "Product",
    "blocks": [
        {
            "type": "vendor",
            "name": "Vendor",
            "limit": 1
        },
        {
            "type": "title",
            "name": "Title",
            "limit": 1
        },
        {
            "type": "price",
            "name": "Price",
            "limit": 1
        },
        {
            "type": "shipping_detail",
            "name": "Shipping Detail",
            "limit": 1
        },
        {
            "type": "variant_selector",
            "name": "Variant Selector",
            "limit": 1
        },
        {
            "type": "quantity",
            "name": "Quantity",
            "limit": 1
        },
        {
            "type": "description",
            "name": "Description",
            "limit": 1
        },
        {
            "type": "checkout_buttons",
            "name": "Checkout Buttons",
            "limit": 1
        }
    ]
}
{% endschema %}